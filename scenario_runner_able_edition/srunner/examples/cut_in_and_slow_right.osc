import basic.osc

global path: Path
global my_map: string = "Town04"
global min_lane: int = 2

struct speeds:
    def compute(x:int = 1, y:int = 1) -> int is expression x-y

scenario dut.cut_in_and_slow:

    ego_vehicle: Model3
    npc: Rubicon 
    a: time = 20s
    b: velocity = 40kph

    event start
    event end
    do serial:
        get_ahead: parallel(duration: a):
            ego_vehicle.drive(path) with: 
                speed(b)
                lane(1, at: start) # left to right: [1..n]
            npc.drive(path) with:
                lane(right_of: ego_vehicle, at: start)
                position(15m, behind: ego_vehicle, at: start)
                position(20m, ahead_of: ego_vehicle, at: end)

        change_lane: parallel(duration: 5s):
            ego_vehicle.drive(path)
            npc.drive(path) with:
                lane(same_as: ego_vehicle, at: end)

        slow: parallel(duration: 20s):
            ego_vehicle.drive(path)
            npc.drive(path) with:
                speed(10kph)

scenario top:
    # path: Path
    path.set_map(my_map)                 
    # set_map("Town04")
    # min_lane: int = 2
    path.path_min_driving_lanes(min_lane)

    ego_vehicle: Model3                 # ego car
    npc: Rubicon
    time_a: time = 30s
    speed_b: velocity = 30kph

    def compute(x:int = 1, y:int = 1) -> int is expression x*y
    c:int = speeds.compute(x:2, y:3)
    d:int = compute(x:2, y:3)
    do serial:
        dut.cut_in_and_slow(a: time_a)
        # dut.cut_in_and_slow(a: time_a, b: speed_b)
        # dut.cut_in_and_slow()
